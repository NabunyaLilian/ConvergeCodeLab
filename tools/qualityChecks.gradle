apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

task checkstyle(type: Checkstyle) {
    description 'Check code standard'
    group 'verification'
    configFile file("${project.rootDir}/tools/rules-checkstyle.xml")
    source fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
    showViolations true
    reports {
        xml.enabled = true
        html.enabled = true
        html.destination = file("$project.buildDir/outputs/checkstyle/checkstyle.html")
    }
}

task findbugs(type: FindBugs) {
    description 'Find bugs mainly design flaws, bad practices, multithreaded correctness and code vulnerabilities.'
    group 'verification'
    excludeFilter = file("$project.rootDir/tools/rules-findbugs.xml")
    classes = fileTree("$project.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/example/thecodelab")
    source = fileTree('src/main/java')
    effort 'max'
    reportLevel = "high"
    classpath = files()

    reports {
        xml.enabled = false
        html.enabled = true
        html.destination = file("$project.buildDir/outputs/findbugs/findbugs.html")
    }
}

task pmd(type: Pmd) {
    description 'Identifying potential problems mainly dead code, duplicated code, cyclomatic complexity and overcomplicated expressions'
    group 'verification'
    ruleSetFiles = files("$project.rootDir/tools/rules-pmd.xml")
    source = fileTree('src/main/java')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        html.destination = file("$project.buildDir/outputs/pmd/pmd.html")
    }
}

android {
    lintOptions {
        lintConfig file("$project.rootDir/tools/rules-lint.xml")
        htmlOutput file("$project.buildDir/outputs/lint/lint.html")
        warningsAsErrors true
        xmlReport false
    }
}

check.dependsOn 'checkstyle', 'findbugs' , 'pmd'